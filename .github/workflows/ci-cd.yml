name: Test, build and publish pyzfn

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # test:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, windows-latest]
  #       python-version: ["3.8", "3.9", "3.10", "3.11"]

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Set Up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install Dependencies
  #       run: |
  #         python -m pip install --root-user-action=ignore --upgrade pip
  #         pip install --root-user-action=ignore -r requirements.txt

  #     - name: Run PyTest
  #       run: |
  #         pip install --root-user-action=ignore pytest pytest-cov
  #         pytest
  deploy:
    # needs: test
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/pyzfn
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Get version from setup.cfg
        run: |
          echo "VERSION=$(python -c 'import configparser; config = configparser.ConfigParser(); config.read("setup.cfg"); print(config["metadata"]["version"])')" >> $GITHUB_ENV

      - name: Check version
        run: |
          if [ -z "${{ env.VERSION }}" ]; then
            echo "Error: VERSION is not set or is empty."
            exit 1
          else
            echo "Version found: ${{ env.VERSION }}"
          fi

      - name: Get latest release version from PyPI
        id: latest_release
        uses: actions/github-script@v5
        with:
          script: |
            const axios = require('axios');
            const packageName = context.repo.repo;  // Use the GitHub repository name

            async function getLatestVersionFromPyPI(packageName) {
              const url = `https://pypi.org/pypi/${packageName}/json`;
              try {
                const response = await axios.get(url);
                return response.data.info.version;
              } catch (error) {
                console.error(`Error fetching data from PyPI for ${packageName}:`, error);
                return null;
              }
            }

            return await getLatestVersionFromPyPI(packageName);

    
      - name: Compare versions and create a new tag if needed
        if: steps.get_version.outputs.version != steps.latest_release.outputs.result
        run: |
          git tag v${{ env.VERSION }}
          git push origin v${{ env.VERSION }}

      - name: Build package
        run: python -m build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
